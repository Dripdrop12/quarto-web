---
title: "Lua filter changes"
---

{{< include _pre-release-feature.qmd >}}

Quarto v1.4 includes the following new features for Lua filters:

## Support for crossreferenceable elements in filters

Quarto v1.4 brings significant changes to the handling of figures, tables, listings, etc.
These changes simplify the writing of Lua filters that targets those elements, but will 
generally require changes in existing.

### The `FloatRefTarget` AST node

In v1.4, crossreferenceable elements all have a single generic type, `FloatRefTarget`. 
This element can be constructed explicitly in a Lua filter.
It can also be used as the element to be processed in a Lua filter directly.

```{.lua}
-- A filter targeting FloatRefTarget nodes
return {
  FloatRefTarget = function(float)
    if float.caption_long then
      float.caption_long.content:insert(pandoc.Str("[This will appear at the beginning of every caption]"))
      return float
    end
  end
}
```

`FloatRefTarget` nodes have the following fields:

- `type`: The type of element: `Figure`, `Table`, `Listing`, etc. Quarto v1.4 supports
  custom node types that can be declared at the document or project level.
- `content`: The content of the Figure, Table, etc. Quarto v1.4
  accepts any content in any `FloatRefTarget` type (so if your tables are better displayed
  as an image, you can use that.).
- `caption_long`: The caption that appears in the main body of the document
- `caption_short`: The caption that appears in the element collations (such as a list of tables, 
  list of figures, etc.)
- `identifier`, `attributes`, `classes`: these are analogous to `Attr` fields in Pandoc AST elements like spans and divs. 
  `identifier`, in addition, needs to be the string that is used in a crossref (`fig-cars`, `tbl-votes`, `lst-query`, and so on).
- `parent_id`: if a `FloatRefTarget` is a subfloat of a parent multiple-element float, then `parent_id` will hold the identifier
  of the parent float.

## Custom formats and Custom renderers

Quarto v1.4 adds support for extensible renderers of quarto AST nodes such as `FloatRefTarget`, `Callout`.
In order to declare a custom renderer, add the following to a Lua filter:

```lua
local predicate = function(float)
  -- return true if this renderer should be used;
  -- typically, this will return true if the custom format is active.
end
local renderer = function(float)
  -- returns a plain Pandoc representation of the rendered figure.
end
quarto._quarto.ast.add_renderer(
  "FloatRefTarget", 
  predicate, 
  renderer)
```

## More entry points for Lua filters, new syntax

Lua filters can now be declared with the following syntax:

```yml
---
filters:
  - at: pre-ast
    path: filter1.lua
  - at: post-ast
    path: filter2.lua
  - at: pre-quarto
    path: filter3.lua
  - at: post-quarto
    path: filter4.lua
  - at: pre-render
    path: filter5.lua
  - at: post-render
    path: filter6.lua
  - pre.lua
  - quarto
  - post.lua
---
```

The following diagram shows the coarse structure of Quarto's Lua filter
chain:

```{mermaid}
flowchart LR
  MD[Input] -- "&nbspAST&nbsp" --> AST[Quarto AST]
  AST -- "&nbspquarto&nbsp" --> AST2[Quarto AST]
  AST2 -- "&nbsprender&nbsp" --> Output
```

- `AST` (Abstract Syntax Tree): In this step, Quarto generates its document structure. 
  This includes:
  - the creation of custom AST nodes like callouts, reftargets, etc
  - parsing HTML tables into Pandoc nodes in every format
  - normalizing metadata such as author information
- `quarto`: In this step, Quarto annotates the document with necessary information for proper rendering, independent of the output format. 
  This includes processing and resolution of crossrefs.
- `render`: In this step, Quarto generates output-specific output from the annotated AST nodes. 
  After `render` is done, no custom AST nodes will be present in the document.

The user-accessible entry points for user filters are: `pre-ast`, `post-ast`, `pre-quarto`, `post-quarto`, `pre-render`, `post-render`. They appear before and after each of the three main stages above.
The `pre-ast` and `pre-render` entry points are new. 
In 1.4, `pre-quarto` and `post-ast` point to the same location in
the filter chain (similarly for `pre-render` and `post-quarto`). 
In the future, this might change if we decide to change the decomposition of the filter chain.

The old "pre" and "post" filter syntax remains valid. 
"Pre" filters are injected at the `pre-quarto` entry point, and "post" are injected at the `post-render` entry point.

The new syntax still supports JSON filters, as 1.3 filters do.
Either use `type: json` explicitly, or use a path that doesn't end in `.lua`.
Similarly, `type: lua` will force the file to be treated as a Lua filter.

## Relative paths in `require()` calls

In larger, more complex filters, it becomes useful to structure your Lua code in modules.
Quarto v1.4 supports the use of relative paths in `require()` calls so that small modules
can be easily created and reused.

For example:

```{.lua filename="filter.lua"}
local utility = require('./utils')
function Pandoc(doc)
  -- process 
end
```

Using relative paths this way in quarto makes it harder for multiple filters to accidentally
create conflicting module names (as would eventually happen when using the standard Lua
`require('utils')` syntax). It's possible to refer to subdirectories and parent directories as well:

```{.lua filename="filter2.lua"}
local parsing = require('./utils/parsing')
function Pandoc(doc)
  -- process 
end
```

```{.lua filename="utils/parsing.lua"}
local utils = require("../utils")
-- ...
```

