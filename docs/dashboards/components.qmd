---
title: "Dashboard Components"
lightbox: auto
---

{{< include /docs/prerelease/1.4/_pre-release-feature.qmd >}}

Dashboards are compositions of components used to provide navigation and present data. Below we'll describe the components that are used to structure the navigation and layout of dashboards.

## Navigation

All dashboards include a top-level navigation bar that provide a title and (optionally) a logo and author. Dashboards with multiple pages also contain a link to each page on the navigation bar:

![](images/navigation-toolbar.png)

You can specify the `title`, `author`, and `logo` using their respective document options:

``` yaml
---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
logo: penguins.png
---
```

## Layout

Within a page, dashboard components are laid out using alternating sets of rows and columns. Rows and columns are in turn defined by markdown headings and computational cells. For example, here's a simple layout with two rows, where the second row is split into two columns:

::: {.chart-example .grid}
::: g-col-5
```` {.python .pymd}
---
title: "Palmer Penguins"
author: "Cobblepot Analytics"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-7
![](images/chart-focal-top.png)
:::
:::

Here, level 2 markdown headings (e.g. `## Row {height=70%}`) define the contents of rows as well as their relative height. The ```` ```{python} ```` code cells in turn automatically create cards that are laid out in columns within the row.

### Fill vs. Flow

Each row in your dashboard that is not given an explicit height will determine its size by either filling available space or by flowing to its natural height. Filling layout is generally the default, however for certain types of content (e.g. markdown text) flow layout is the default.

If the default behavior isn't what you want, you can explicitly specify filling or flowing behavior usign the `.fill` and `.flow` classes applied to a row. For example:

````{.python .pymd}
## Row {.fill}

## Row {.flow}
````

### Orientation

By default, dashboard pages are laid out first by row, then by column. However, you can change this by specifying the `orientation: columns` document option:

::: {.chart-example .grid}
::: g-col-5
```` {.python .pymd}
---
title: "Diamonds Explorer"
format: 
  dashboard:
    orientation: columns
---
    
## Column {width=60%}

```{{python}}
```

## Column {width=40%}

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-7
![](images/chart-focal-left.png)
:::
:::

### Scrolling

By default, dashboard content fills all available space in the page. You can alternatively specify the `scrolling: true` option to layout content using its natural height and scroll to accommodate page overflow. For example:

::: {.chart-example .grid}
::: g-col-5
```` {.python .pymd}
---
title: "Scrolling"
format: 
  dashboard:
    scrolling: true 
---
    
```{{python}}
```

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-7
![](images/chart-stack-scrolling.png)
:::
:::

Because of its ability to scroll this layout could easily accommodate many more charts. While this is useful, you might also consider [Pages](#pages) and [Tabsets](#tabsets) (described in the next two sections) as alternate ways to present content within layouts that fill their page.

The article on [Dashboard Layouts](layouts.qmd) provides extensive additional example layouts which you can use as a basis for your own dashboards.

## Pages {#pages}

The layout examples above demonstrated only single-page dashboards. To introduce multiple pages, use level 1 headings above the level 2 headings used to define rows and columns. For example, here is a dashboard that splits content across two pages:

```` {.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
# Bills 

```{{python}}
```

# Flippers {orientation="columns"}

## Column

```{{python}}
```

```{{python}}
```

## Column 

```{{python}}
```
````

Note that we can set a per-page orientation by adding an `orientation` attribute to the page heading (here `orientation="columns"` for the second page).

## Tabsets {#tabsets}

Use tabsets to include multiple views of data or to include content of secondary importance without having it crown the main display. Tabsets are created by adding the `.tabset` class to a row or column. For example, this layout displays the bottom row as a set of two tabs.

::: {.chart-example .grid}
::: g-col-5
```` {.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row

```{{python}}
```

## Row {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```
````
:::

::: g-col-7
![](images/chart-tabset-row.png)
:::
:::

You can include tabsets at arbitrarily deep levels. Here we include a tabset within a column of a top level row. Each cell within the tabset column becomes a tab.

::: {.chart-example .grid}
::: g-col-5
```` {.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row {height=70%}

```{{python}}
```

## Row {height=30%}

### Column {.tabset}

```{{python}}
#| title: Chart 2
```

```{{python}}
#| title: Chart 3
```

### Column

```{{python}}
```
````
:::

::: g-col-7
![](images/chart-tabset-card.png)
:::
:::

We provide navigational titles for our tabs by adding a `title` option to the cell used to produce each tab.

Note that you can also have tabs that contain only markdown. To do this use a `::: {.content}` div and include a `title` attribute for the tab:

````python
::: {.content title="My Title"}
Card text 
:::
````

In the examples above, each tab include a single card. If you want tabs to contain multiple cards, you can introduce another level of tab headings (each of which includes a `title` attribute for the tab). For example:

````{.python .pymd}
---
title: "Palmer Penguins"
format: dashboard
---
    
## Row {.tabset}

### Tab {title="Plots"}

```{{python}}
```

```{{python}}
```

### Tab {title="Data"}

```{{python}}
```
````


## Cards {#cards}

Cards are the fundamental unit of display within dashboards. Cards are created automatically for cells and markdown content that are within rows and columns. So for example, each of the Python cells here become cards:

```` {.python .pymd}
## Column {width=40%}

```{{python}}
```

```{{python}}
```
````

You can also create cards that contain arbitrary markdown via a `.content` div. For example:

```` {.python .pymd}
## Column {width=40%}

```{{python}}
```

::: {.content}
This text will be displayed within a card
:::

```{{python}}
```
````

Note that if you want to provide a title for a markdown card use the `title` attribute. For example:

````python
::: {.content title="My Title"}
This text will be displayed within a card
:::
````

Note that if you are authoring within a Jupyter Notebook then markdown cells automatically become `.content` divs.

In the section on [Cell Output](data-presentation.qmd#cell-output) there are additional details on how cells and their content are mapped to cards (e.g. excluding cells, cells with multiple outputs, etc.).

### Display Options

By default, cards are displayed with no title and a small bit of padding around the edges. Here is a card that displays a [Leaflet](https://ipyleaflet.readthedocs.io) map:

![](images/leaflet-card.png)

You can add a title to a card by including the `title` cell option. You can also customize the padding using the `padding` option. For example, here we add a title and remove the padding entirely:

```` {.python .pymd}
```{{python}}
#| title: "World Map"
#| padding: 0px
from ipyleaflet import Map, basemaps, basemap_to_tiles
Map(basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(48.204793, 350.121558), zoom=2)
```
````

![](images/leaflet-card-title-padding.png)

You can create a dynamic `title` by printing a `title=` expression as a cell's first output. For example:

```` {.python .pymd}
```{{python}}
from ipyleaflet import Map, basemaps, basemap_to_tiles

lat = 48
long = 350

print("title=", f"World Map at {lat}, {long}")

Map(basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(lat, long), zoom=2)
```
````

Note that for R you would use the `cat()` rather than `print()` function.


#### Expanding Cards

By default, you can zoom in on the content of cards using the expand button in the bottom right:

![](images/leaflet-card-expandable.png)

If you don't want cards to be expandable you can specify `expandable: false` (either at the document level or for individual cards).

## Sidebars

Sidebars are a great place to group inputs for Shiny interactive dashboards. To include a sidebar, add the `.sidebar` class to a level 2 heading:

::: {.chart-example .grid}
::: g-col-5
```` {.python .pymd}
---
title: "Sidebar"
format: dashboard
---
    
## {.sidebar}

```{{python}}
```

## Column 

```{{python}}
```

```{{python}}
```
````
:::

::: g-col-7
![](images/chart-input-sidebar.png)
:::
:::

### Global Sidebar

If you have a dashboard with [multiple pages](#pages), you may want the sidebar to be global (i.e. visible across all pages). To do this, add the `.sidebar` class to a level one heading:

```` {.python .pymd}
---
title: "Sidebar"
format: dashboard
---
    
# {.sidebar}

Sidebar content

# Page 1 

```{{python}}
```

# Page 2

```{{python}}
```
````
